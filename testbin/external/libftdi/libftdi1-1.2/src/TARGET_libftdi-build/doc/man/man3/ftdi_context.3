.TH "Ftdi::Context" 3 "Fri Mar 6 2015" "Version 1.2" "libftdi1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Ftdi::Context \- 
.PP
FTDI device context\&. Represents single FTDI device context\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ftdi\&.hpp>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBPrivate\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBDirection\fP { \fBInput\fP, \fBOutput\fP }"
.br
.RI "\fIDirection flags for \fBflush()\fP\&. \fP"
.ti -1c
.RI "enum \fBModemCtl\fP { \fBDtr\fP, \fBRts\fP }"
.br
.RI "\fIModem control flags\&. \fP"
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBContext\fP ()"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "\fB~Context\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "\fBEeprom\fP * \fBeeprom\fP ()"
.br
.ti -1c
.RI "const std::string & \fBvendor\fP ()"
.br
.RI "\fIDevice strings properties\&. \fP"
.ti -1c
.RI "const std::string & \fBdescription\fP ()"
.br
.RI "\fIDevice strings properties\&. \fP"
.ti -1c
.RI "const std::string & \fBserial\fP ()"
.br
.RI "\fIDevice strings properties\&. \fP"
.ti -1c
.RI "bool \fBis_open\fP ()"
.br
.ti -1c
.RI "int \fBopen\fP (struct libusb_device *dev=0)"
.br
.ti -1c
.RI "int \fBopen\fP (int \fBvendor\fP, int product)"
.br
.ti -1c
.RI "int \fBopen\fP (int \fBvendor\fP, int product, const std::string &\fBdescription\fP, const std::string &\fBserial\fP=std::string(), unsigned int index=0)"
.br
.ti -1c
.RI "int \fBopen\fP (const std::string &\fBdescription\fP)"
.br
.ti -1c
.RI "int \fBclose\fP ()"
.br
.ti -1c
.RI "int \fBreset\fP ()"
.br
.ti -1c
.RI "int \fBflush\fP (int mask=\fBInput\fP|\fBOutput\fP)"
.br
.ti -1c
.RI "int \fBset_interface\fP (enum \fBftdi_interface\fP interface)"
.br
.ti -1c
.RI "void \fBset_usb_device\fP (struct libusb_device_handle *dev)"
.br
.ti -1c
.RI "int \fBset_baud_rate\fP (int baudrate)"
.br
.ti -1c
.RI "int \fBset_line_property\fP (enum \fBftdi_bits_type\fP bits, enum \fBftdi_stopbits_type\fP sbit, enum \fBftdi_parity_type\fP parity)"
.br
.ti -1c
.RI "int \fBset_line_property\fP (enum \fBftdi_bits_type\fP bits, enum \fBftdi_stopbits_type\fP sbit, enum \fBftdi_parity_type\fP parity, enum \fBftdi_break_type\fP break_type)"
.br
.ti -1c
.RI "int \fBget_usb_read_timeout\fP () const "
.br
.ti -1c
.RI "void \fBset_usb_read_timeout\fP (int usb_read_timeout)"
.br
.ti -1c
.RI "int \fBget_usb_write_timeout\fP () const "
.br
.ti -1c
.RI "void \fBset_usb_write_timeout\fP (int usb_write_timeout)"
.br
.ti -1c
.RI "int \fBread\fP (unsigned char *buf, int size)"
.br
.ti -1c
.RI "int \fBwrite\fP (unsigned char *buf, int size)"
.br
.ti -1c
.RI "int \fBset_read_chunk_size\fP (unsigned int chunksize)"
.br
.ti -1c
.RI "int \fBset_write_chunk_size\fP (unsigned int chunksize)"
.br
.ti -1c
.RI "int \fBread_chunk_size\fP ()"
.br
.ti -1c
.RI "int \fBwrite_chunk_size\fP ()"
.br
.ti -1c
.RI "int \fBset_event_char\fP (unsigned char eventch, unsigned char enable)"
.br
.ti -1c
.RI "int \fBset_error_char\fP (unsigned char errorch, unsigned char enable)"
.br
.ti -1c
.RI "int \fBset_flow_control\fP (int flowctrl)"
.br
.ti -1c
.RI "int \fBset_modem_control\fP (int mask=\fBDtr\fP|\fBRts\fP)"
.br
.ti -1c
.RI "int \fBset_latency\fP (unsigned char \fBlatency\fP)"
.br
.ti -1c
.RI "int \fBset_dtr\fP (bool state)"
.br
.ti -1c
.RI "int \fBset_rts\fP (bool state)"
.br
.ti -1c
.RI "unsigned short \fBpoll_modem_status\fP ()"
.br
.ti -1c
.RI "unsigned \fBlatency\fP ()"
.br
.ti -1c
.RI "int \fBset_bitmode\fP (unsigned char bitmask, unsigned char mode)"
.br
.ti -1c
.RI "int \fBset_bitmode\fP (unsigned char bitmask, enum \fBftdi_mpsse_mode\fP mode)"
.br
.ti -1c
.RI "int \fBbitbang_disable\fP ()"
.br
.ti -1c
.RI "int \fBread_pins\fP (unsigned char *pins)"
.br
.ti -1c
.RI "char * \fBerror_string\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "int \fBget_strings\fP ()"
.br
.ti -1c
.RI "int \fBget_strings_and_reopen\fP ()"
.br
.ti -1c
.RI "struct \fBftdi_context\fP * \fBcontext\fP ()"
.br
.ti -1c
.RI "void \fBset_context\fP (struct \fBftdi_context\fP *\fBcontext\fP)"
.br
.ti -1c
.RI "void \fBset_usb_device\fP (struct libusb_device *dev)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBEeprom\fP"
.br
.ti -1c
.RI "class \fBList\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
FTDI device context\&. Represents single FTDI device context\&. 
.PP
Definition at line 47 of file ftdi\&.hpp\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBFtdi::Context::Direction\fP"

.PP
Direction flags for \fBflush()\fP\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIInput \fP\fP
.TP
\fB\fIOutput \fP\fP
.PP
Definition at line 56 of file ftdi\&.hpp\&.
.SS "enum \fBFtdi::Context::ModemCtl\fP"

.PP
Modem control flags\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIDtr \fP\fP
.TP
\fB\fIRts \fP\fP
.PP
Definition at line 64 of file ftdi\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Ftdi::Context::Context ()"

.PP
Constructor\&. 
.PP
Definition at line 66 of file ftdi\&.cpp\&.
.SS "Ftdi::Context::~Context ()"

.PP
Destructor\&. 
.PP
Definition at line 73 of file ftdi\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBEeprom\fP* Ftdi::Context::eeprom ()"

.SS "const std::string & Ftdi::Context::vendor ()"

.PP
Device strings properties\&. 
.PP
Definition at line 363 of file ftdi\&.cpp\&.
.PP
Referenced by get_strings()\&.
.SS "const std::string & Ftdi::Context::description ()"

.PP
Device strings properties\&. 
.PP
Definition at line 370 of file ftdi\&.cpp\&.
.SS "const std::string & Ftdi::Context::serial ()"

.PP
Device strings properties\&. 
.PP
Definition at line 377 of file ftdi\&.cpp\&.
.PP
Referenced by get_strings()\&.
.SS "bool Ftdi::Context::is_open ()"

.PP
Definition at line 77 of file ftdi\&.cpp\&.
.SS "int Ftdi::Context::open (struct libusb_device *dev = \fC0\fP)"

.PP
Definition at line 122 of file ftdi\&.cpp\&.
.PP
References get_strings_and_reopen()\&.
.SS "int Ftdi::Context::open (intvendor, intproduct)"

.PP
Definition at line 82 of file ftdi\&.cpp\&.
.PP
References ftdi_usb_open(), and get_strings_and_reopen()\&.
.SS "int Ftdi::Context::open (intvendor, intproduct, const std::string &description, const std::string &serial = \fCstd::string()\fP, unsigned intindex = \fC0\fP)"

.PP
Definition at line 93 of file ftdi\&.cpp\&.
.PP
References ftdi_usb_open_desc_index(), and get_strings_and_reopen()\&.
.SS "int Ftdi::Context::open (const std::string &description)"

.PP
Definition at line 112 of file ftdi\&.cpp\&.
.PP
References ftdi_usb_open_string(), and get_strings_and_reopen()\&.
.SS "int Ftdi::Context::close ()"

.PP
Definition at line 133 of file ftdi\&.cpp\&.
.PP
References ftdi_usb_close()\&.
.SS "int Ftdi::Context::reset ()"

.PP
Definition at line 140 of file ftdi\&.cpp\&.
.PP
References ftdi_usb_reset()\&.
.SS "int Ftdi::Context::flush (intmask = \fC\fBInput\fP|\fBOutput\fP\fP)"

.PP
Definition at line 145 of file ftdi\&.cpp\&.
.PP
References ftdi_usb_purge_rx_buffer(), ftdi_usb_purge_tx_buffer(), Input, and Output\&.
.SS "int Ftdi::Context::set_interface (enum \fBftdi_interface\fPinterface)"

.PP
Definition at line 157 of file ftdi\&.cpp\&.
.PP
References ftdi_set_interface()\&.
.SS "void Ftdi::Context::set_usb_device (struct libusb_device_handle *dev)"

.PP
Definition at line 162 of file ftdi\&.cpp\&.
.PP
References ftdi_set_usbdev()\&.
.PP
Referenced by Ftdi::List::List()\&.
.SS "int Ftdi::Context::set_baud_rate (intbaudrate)"

.PP
Definition at line 168 of file ftdi\&.cpp\&.
.PP
References ftdi_set_baudrate()\&.
.SS "int Ftdi::Context::set_line_property (enum \fBftdi_bits_type\fPbits, enum \fBftdi_stopbits_type\fPsbit, enum \fBftdi_parity_type\fPparity)"

.PP
Definition at line 173 of file ftdi\&.cpp\&.
.PP
References ftdi_set_line_property()\&.
.SS "int Ftdi::Context::set_line_property (enum \fBftdi_bits_type\fPbits, enum \fBftdi_stopbits_type\fPsbit, enum \fBftdi_parity_type\fPparity, enum \fBftdi_break_type\fPbreak_type)"

.PP
Definition at line 178 of file ftdi\&.cpp\&.
.PP
References ftdi_set_line_property2()\&.
.SS "int Ftdi::Context::get_usb_read_timeout () const"

.PP
Definition at line 183 of file ftdi\&.cpp\&.
.SS "void Ftdi::Context::set_usb_read_timeout (intusb_read_timeout)"

.PP
Definition at line 188 of file ftdi\&.cpp\&.
.SS "int Ftdi::Context::get_usb_write_timeout () const"

.PP
Definition at line 193 of file ftdi\&.cpp\&.
.SS "void Ftdi::Context::set_usb_write_timeout (intusb_write_timeout)"

.PP
Definition at line 198 of file ftdi\&.cpp\&.
.SS "int Ftdi::Context::read (unsigned char *buf, intsize)"

.PP
Definition at line 203 of file ftdi\&.cpp\&.
.PP
References ftdi_read_data()\&.
.SS "int Ftdi::Context::write (unsigned char *buf, intsize)"

.PP
Definition at line 222 of file ftdi\&.cpp\&.
.PP
References ftdi_write_data()\&.
.SS "int Ftdi::Context::set_read_chunk_size (unsigned intchunksize)"

.PP
Definition at line 208 of file ftdi\&.cpp\&.
.PP
References ftdi_read_data_set_chunksize()\&.
.SS "int Ftdi::Context::set_write_chunk_size (unsigned intchunksize)"

.PP
Definition at line 227 of file ftdi\&.cpp\&.
.PP
References ftdi_write_data_set_chunksize()\&.
.SS "int Ftdi::Context::read_chunk_size ()"

.PP
Definition at line 213 of file ftdi\&.cpp\&.
.PP
References ftdi_read_data_get_chunksize()\&.
.SS "int Ftdi::Context::write_chunk_size ()"

.PP
Definition at line 232 of file ftdi\&.cpp\&.
.PP
References ftdi_write_data_get_chunksize()\&.
.SS "int Ftdi::Context::set_event_char (unsigned chareventch, unsigned charenable)"

.PP
Definition at line 287 of file ftdi\&.cpp\&.
.PP
References ftdi_set_event_char()\&.
.SS "int Ftdi::Context::set_error_char (unsigned charerrorch, unsigned charenable)"

.PP
Definition at line 292 of file ftdi\&.cpp\&.
.PP
References ftdi_set_error_char()\&.
.SS "int Ftdi::Context::set_flow_control (intflowctrl)"

.PP
Definition at line 241 of file ftdi\&.cpp\&.
.PP
References ftdi_setflowctrl()\&.
.SS "int Ftdi::Context::set_modem_control (intmask = \fC\fBDtr\fP|\fBRts\fP\fP)"

.PP
Definition at line 246 of file ftdi\&.cpp\&.
.PP
References Dtr, ftdi_setdtr_rts(), and Rts\&.
.SS "int Ftdi::Context::set_latency (unsigned charlatency)"

.PP
Definition at line 268 of file ftdi\&.cpp\&.
.PP
References ftdi_set_latency_timer()\&.
.SS "int Ftdi::Context::set_dtr (boolstate)"

.PP
Definition at line 258 of file ftdi\&.cpp\&.
.PP
References ftdi_setdtr()\&.
.SS "int Ftdi::Context::set_rts (boolstate)"

.PP
Definition at line 263 of file ftdi\&.cpp\&.
.PP
References ftdi_setrts()\&.
.SS "unsigned short Ftdi::Context::poll_modem_status ()"

.PP
Definition at line 280 of file ftdi\&.cpp\&.
.PP
References ftdi_poll_modem_status()\&.
.SS "unsigned Ftdi::Context::latency ()"

.PP
Definition at line 273 of file ftdi\&.cpp\&.
.PP
References ftdi_get_latency_timer()\&.
.SS "int Ftdi::Context::set_bitmode (unsigned charbitmask, unsigned charmode)"

.PP
Definition at line 297 of file ftdi\&.cpp\&.
.PP
References ftdi_set_bitmode()\&.
.SS "int Ftdi::Context::set_bitmode (unsigned charbitmask, enum \fBftdi_mpsse_mode\fPmode)"

.PP
Definition at line 302 of file ftdi\&.cpp\&.
.PP
References ftdi_set_bitmode()\&.
.SS "int Ftdi::Context::bitbang_disable ()"

.PP
Definition at line 307 of file ftdi\&.cpp\&.
.PP
References ftdi_disable_bitbang()\&.
.SS "int Ftdi::Context::read_pins (unsigned char *pins)"

.PP
Definition at line 312 of file ftdi\&.cpp\&.
.PP
References ftdi_read_pins()\&.
.SS "char * Ftdi::Context::error_string ()"

.PP
Definition at line 317 of file ftdi\&.cpp\&.
.PP
References ftdi_get_error_string()\&.
.SS "int Ftdi::Context::get_strings ()\fC [protected]\fP"

.PP
Definition at line 322 of file ftdi\&.cpp\&.
.PP
References ftdi_usb_get_strings(), serial(), and vendor()\&.
.PP
Referenced by get_strings_and_reopen(), and Ftdi::List::List()\&.
.SS "int Ftdi::Context::get_strings_and_reopen ()\fC [protected]\fP"

.PP
Definition at line 339 of file ftdi\&.cpp\&.
.PP
References ftdi_usb_open_dev(), and get_strings()\&.
.PP
Referenced by open()\&.
.SS "struct \fBftdi_context\fP * Ftdi::Context::context ()\fC [protected]\fP"

.PP
Definition at line 393 of file ftdi\&.cpp\&.
.PP
Referenced by Ftdi::Eeprom::Eeprom(), Ftdi::List::find_all(), and set_context()\&.
.SS "void Ftdi::Context::set_context (struct \fBftdi_context\fP *context)\fC [protected]\fP"

.PP
Definition at line 382 of file ftdi\&.cpp\&.
.PP
References context(), and ftdi_free()\&.
.SS "void Ftdi::Context::set_usb_device (struct libusb_device *dev)\fC [protected]\fP"

.PP
Definition at line 388 of file ftdi\&.cpp\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBEeprom\fP\fC [friend]\fP"

.PP
Definition at line 50 of file ftdi\&.hpp\&.
.SS "friend class \fBList\fP\fC [friend]\fP"

.PP
Definition at line 51 of file ftdi\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libftdi1 from the source code\&.
